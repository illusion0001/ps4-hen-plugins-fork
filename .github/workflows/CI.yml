name: Build modules

on:
  push:
    paths-ignore:
      - "**/*.md"
      - '**/*.txt'
  pull_request:
    paths-ignore:
      - "**/*.md"
      - '**/*.txt'
  workflow_dispatch:

# for release create
permissions:
  contents: write

concurrency:
  group: ${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  build_prx:
    runs-on: ubuntu-latest
    env:
      zip: '${{ github.workspace }}/plugins.zip'
      zip_glob_path: 'bin/plugins/prx_final'
      zip_glob: '*.prx'
      build_tag: b${{ github.run_number }}
    steps:

    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Setup variables
      run: |
        sudo apt install llvm lld
        echo "commit_ver=1.$(git rev-list HEAD --count)" >> $GITHUB_ENV
        echo "commit_hash=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

    - name: Download OpenOrbis Toolchain
      run: |
        f=toolchain-llvm-18.2
        curl -fLJO https://github.com/OpenOrbis/OpenOrbis-PS4-Toolchain/releases/download/v0.5.3/$f.zip
        unzip $f.zip
        tar -xzf toolchain-llvm-18.tar.gz -C ./
        ls .
        echo "OO_PS4_TOOLCHAIN=$PWD/OpenOrbis/PS4Toolchain" >> $GITHUB_ENV

    - name: Build bootloader
      run: make -C plugin_bootloader

    - name: Build loader
      run: make -C plugin_loader

    - name: Build modules
      run: |
        make -C plugin_example
        make -C plugin_mono
        make -C plugin_server

    - name: Zip
      working-directory: ${{ env.zip_glob_path }}
      run: 7z a ${{ env.zip }} ${{ env.zip_glob }} ${{ github.workspace }}/LICENSE

    - name: Upload plugins
      if: github.event_name != 'push'
      uses: actions/upload-artifact@main
      with:
        name: plugins-${{ env.build_tag }}
        path: |
          ${{ github.workspace }}/${{ env.zip_glob_path }}/${{ env.zip_glob }}
          ${{ github.workspace }}/LICENSE

    - name: Release
      if: github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: gh release create ${{ env.build_tag }} ${{ env.zip }} --target ${{ github.sha }} -t "Build ${{ env.build_tag }}" -p
